!function(t){var e={};function o(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)o.d(n,s,function(e){return t[e]}.bind(null,s));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e),o.d(e,"default",(function(){return a}));class n{constructor(){this.subs=[]}addSub(t){this.subs.push(t)}removeSub(t){remove(this.subs,t)}depend(){console.log("收集依赖"),window.target&&(console.log("depend",window.target),this.addSub(window.target))}notify(){console.log("notify","更新依赖");const t=this.subs.slice();console.log("---",t,"---");for(let e=0,o=t.length;e<o;e++)t[e].update()}remove(t,e){if(t.length){const o=t.indexOf(e);if(o>-1)return t.splice(o,1)}}}class s{constructor(t){this.value=t,Array.isArray(t)||this.walk(t)}walk(t){console.log("walk",t);const e=Object.keys(t);console.log(e);for(let o=0,n=e.length;o<n;o++)l(t,e[o],t[e[o]])}}function l(t,e,o){"object"==typeof o&&new s(o);let l=new n;Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:()=>(console.log(e+"属性被读取了"),l.depend(),o),set(t){console.log(e+"属性被修改了"),o!==t&&(o=t,l.notify())}})}const i=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/,r=new RegExp(`[^${i.source}.$_\\d]`);class c{constructor(t,e,o){console.log(t,e,o),this.vm=t,this.getter=function(t){if(console.log(t),console.log(r.test(t)),r.test(t))return;const e=t.split(".");return console.log(e),console.log(i.source),function(t){console.log(t);for(let o=0;o<e.length;o++){if(console.log(o,e[o]),!t)return;t=t[e[o]]}return t}}(e),console.log(this.getter),this.cb=o,this.value=this.get()}get(){window.target=this,console.log(this.getter);let t=this.getter.call(this.vm,this.vm);return console.log(t),window.target=void 0,t}update(){console.log("update","更新依赖");const t=this.value;this.value=this.get(),this.cb.call(this.vm,this.value,t)}}class u{constructor(t,e){this.$el=document.querySelector(t),this.$vm=e,this.$el&&(console.log("el",this.$el),this.$fragment=this.getNodeChirdren(this.$el),this.compile(this.$fragment),this.$el.appendChild(this.$fragment))}getNodeChirdren(t){const e=document.createDocumentFragment();let o;for(;o=t.firstChild;)e.appendChild(o);return e}compile(t){const e=t.childNodes;Array.from(e).forEach(t=>{1==t.nodeType||2==t.nodeType||3==t.nodeType&&this.compileText(t),t.childNodes&&t.childNodes.length>0&&this.compile(t)})}compileText(t){console.log("compileText");const e=/\{\{(.+?)\}\}/;var o=t.textContent;if(e.test(o)){const n=RegExp.$1.trim();t.textContent=o.replace(e,this.$vm.$data[n]),console.log(this.$vm.$data),console.log(n),console.log(this.$vm.$data[n]),new c(this.$vm.$data,n,e=>{console.log("通过回调函数，更新视图",e),t.textContent=e})}}}class a{constructor(t){this.$data=t.data,this.$el=t.el,this.$options=t,this.init()}init(){const t=this;this.$data&&(console.log("处理data"),this.initData(t)),this.$el&&(console.log("处理el"),new u(this.$el,t))}initData(t){new s(t.$data)}}window.MiniVue=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,